.model DATAPATH
.inputs SETUP G1_1 G1_0 G2_1 G2_0
.outputs PARTITA_1 PARTITA_0 MANCHE_1 MANCHE_0 END BITDEBUG

# -------- Costatnti
.subckt CONST_TRUE OUT=TRUE
.subckt CONST_FALSE OUT=FALSE


# -------- Aggiornamento registri:

# Reg fine partita

# Check if PARTITA_1 or PARTITA_0 are TRUE
.subckt xnor A=PARTITA_1 B=TRUE OUT=PARTITA_1_ENDED
.subckt xnor A=PARTITA_0 B=TRUE OUT=PARTITA_0_ENDED
.subckt OR A=PARTITA_1_ENDED B=PARTITA_0_ENDED OUT=SET_NEW_END

.subckt MUX2_1 S=END A1=SET_NEW_END B1=TRUE OUT1=PRE_SET_ENDED
.subckt MUX2_1 S=SETUP A1=PRE_SET_ENDED B1=FALSE OUT1=SET_END
.subckt REG A=SET_END O=END


#Reg counter of turn
.subckt MUX5_1 S=SETUP A4=SET_TURN_4 A3=SET_TURN_3 A2=SET_TURN_2 A1=SET_TURN_1 A0=SET_TURN_0 B4=AFTER_SUM_SETUP_TURN_4 B3=AFTER_SUM_SETUP_TURN_3 B2=AFTER_SUM_SETUP_TURN_2 B1=AFTER_SUM_SETUP_TURN_1 B0=AFTER_SUM_SETUP_TURN_0 OUT4=UPDATE_TURN_REG_4 OUT3=UPDATE_TURN_REG_3 OUT2=UPDATE_TURN_REG_2 OUT1=UPDATE_TURN_REG_1 OUT0=UPDATE_TURN_REG_0
.subckt REG5 A4=UPDATE_TURN_REG_4 A3=UPDATE_TURN_REG_3 A2=UPDATE_TURN_REG_2 A1=UPDATE_TURN_REG_1 A0=UPDATE_TURN_REG_0 OUT4=TURN_4 OUT3=TURN_3 OUT2=TURN_2 OUT1=TURN_1 OUT0=TURN_0

# Reg "Mossa precedente"
.subckt OR A=MOSSA_NON_VALIDA_O_PREC_NON_VALIDA B=SETUP OUT=DONT_UPDATE_MOSSA_PREC
.subckt MUX3_1 S=DONT_UPDATE_MOSSA_PREC A2=MANCHE_G2 A1=SET_MOSSA_PREC_1 A0=SET_MOSSA_PREC_0 B2=FALSE B1=FALSE B0=FALSE OUT2=UPDATE_LAST_MOVE_REG_2 OUT1=UPDATE_LAST_MOVE_REG_1 OUT0=UPDATE_LAST_MOVE_REG_0
.subckt REG3 A2=UPDATE_LAST_MOVE_REG_2 A1=UPDATE_LAST_MOVE_REG_1 A0=UPDATE_LAST_MOVE_REG_0 OUT2=LAST_MOVE_2 OUT1=LAST_MOVE_1 OUT0=LAST_MOVE_0

# Reg points
.subckt MUX4_1 S=SETUP A3=SET_POINTS_3 A2=SET_POINTS_2 A1=SET_POINTS_1 A0=SET_POINTS_0 B3=FALSE B2=FALSE B1=FALSE B0=FALSE OUT3=UPDATE_POINTS_REG_3 OUT2=UPDATE_POINTS_REG_2 OUT1=UPDATE_POINTS_REG_1 OUT0=UPDATE_POINTS_REG_0
.subckt REG4 A3=UPDATE_POINTS_REG_3 A2=UPDATE_POINTS_REG_3 A1=UPDATE_POINTS_REG_1 A0=UPDATE_POINTS_REG_0 OUT3=POINTS_3 OUT2=POINTS_2 OUT1=POINTS_1 OUT0=POINTS_0

# Reg primi quattro turni
.subckt MUX2_1 S=SETUP A1=SET_PRIMI_1 A0=SET_PRIMI_0 B1=FALSE B0=FALSE OUT1=UPDATE_PRIMI_REG_1 OUT0=UPDATE_PRIMI_REG_0
.subckt REG2 A1=UPDATE_PRIMI_REG_1 A0=UPDATE_PRIMI_REG_0 OUT1=PRIMI_1 OUT0=PRIMI_0


# Inserimento turni nel registro
.subckt SUM5 A4=FALSE A3=G1_1 A2=G1_0 A1=G2_1 A0=G2_0 B4=FALSE B3=FALSE B2=TRUE B1=FALSE B0=FALSE OUT4=AFTER_SUM_SETUP_TURN_4 OUT3=AFTER_SUM_SETUP_TURN_3 OUT2=AFTER_SUM_SETUP_TURN_2 OUT1=AFTER_SUM_SETUP_TURN_1 OUT0=AFTER_SUM_SETUP_TURN_0


# Verifico se un giocatore ha messo mossa non valida
#! Posso anche toglierli e metterli direttamente nel DECODER
# .subckt EQUAL2 A1=FALSE A0=FALSE B1=G1_1 B0=G1_0 OUT=MOVE_NOT_VALID_G1
# .subckt EQUAL2 A1=FALSE A0=FALSE B1=G2_1 B0=G2_0 OUT=MOVE_NOT_VALID_G2

.subckt OR A=MOVE_NOT_VALID_G1 B=MOVE_NOT_VALID_G2 OUT=MOVE_NOT_VALID



# Verifico se un giocatore ha giocato una mossa precedente
.subckt MUX2_1 S=LAST_MOVE_2 A1=G1_1 A0=G1_0 B1=G2_1 B0=G2_0 OUT1=CURRENT_MOVE_1 OUT0=CURRENT_MOVE_0
.subckt EQUAL5 A1=CURRENT_MOVE_1 A0=CURRENT_MOVE_0 B1=LAST_MOVE_1 B0=LAST_MOVE_0 OUT=MOVE_PREC_NOT_VALID


# OR: Verifico se un giocatore ha giocato una mossa non valida o una mossa precedente non valida
.subckt OR A=MOVE_NOT_VALID B=MOVE_PREC_NOT_VALID OUT=MOSSA_NON_VALIDA_O_PREC_NON_VALIDA

# Aumento registro dei turni
.subckt SUM5 A4=TURN_4 A3=TURN_3 A2=TURN_2 A1=TURN_1 A0=TURN_0 B4=TRUE B3=TRUE B2=TRUE B1=TRUE B0=TRUE OUT4=TURN_AFTER_SUM_4 OUT3=TURN_AFTER_SUM_3 OUT2=TURN_AFTER_SUM_2 OUT1=TURN_AFTER_SUM_1 OUT0=TURN_AFTER_SUM_0
.subckt MUX5_1 S=MOSSA_NON_VALIDA_O_PREC_NON_VALIDA A4=TURN_AFTER_SUM_4 A3=TURN_AFTER_SUM_3 A2=TURN_AFTER_SUM_2 A1=TURN_AFTER_SUM_1 A0=TURN_AFTER_SUM_0 B4=TURN_4 B3=TURN_3 B2=TURN_2 B1=TURN_1 B0=TURN_0 OUT4=SET_TURN_4 OUT3=SET_TURN_3 OUT2=SET_TURN_2 OUT1=SET_TURN_1 OUT0=SET_TURN_0

# Aggiorno registro della mossa precedente
.subckt MUX3_1 S=RESET_MOSSA_PREC_REG A2=FALSE A1=FALSE A0=FALSE B2=MOSSA_CORRENTE_VINCITA_2 B1=MOSSA_CORRENTE_VINCITA_1 B0=MOSSA_CORRENTE_VINCITA_0 OUT2=TEMP_NEW_MOSSA_PREC_2_REG OUT1=TEMP_NEW_MOSSA_PREC_1_REG OUT0=TEMP_NEW_MOSSA_PREC_0_REG


# Aggirnamento registro primi 4 turni
.subckt OR A=MOSSA_NON_VALIDA_O_PREC_NON_VALIDA B=END_PRIMI_4_TURNI OUT=DONT_UPDATE_PRIMI
.subckt SUM5 A4=FALSE A3=FALSE A2=FALSE A1=PRIMI_1 A0=PRIMI_0 B1=FALSE B0=TRUE OUT1=SUM_PRIMI_1 OUT0=SUM_PRIMI_0
.subckt MUX2_1 S=DONT_UPDATE_PRIMI A1=SUM_PRIMI_1 A0=SUM_PRIMI_0 B1=PRIMI_1 B0=PRIMI_0 OUT1=SET_PRIMI_1 OUT0=SET_PRIMI_0
.subckt EQUAL5 A4=FALSE A3=FALSE A2=FALSE A1=PRIMI_1 A0=PRIMI_0 B4=FALSE B3=FALSE B2=FALSE B1=TRUE B0=TRUE OUT=END_PRIMI_4_TURNI

# Aggiorno registro di mossa non valida
.subckt MUX2_1 S=MANCHE_G2 A1=G1_1 A0=G1_0 B1=G2_1 B0=G2_0 OUT1=SET_MOSSA_PREC_1 OUT0=SET_MOSSA_PREC_0

# Vediamo se un giocatore ha vinto
# Giocatore 1
.subckt DECODER2 S1=G1_1 S0=G1_0 OUT0=MOVE_NOT_VALID_G1 OUT1=G1_MOVE_ROCK OUT2=G1_MOVE_PAPER OUT3=G1_MOVE_SCISSORS

# Giocatore 2
.subckt DECODER2 S1=G2_1 S0=G2_0 OUT0=MOVE_NOT_VALID_G2 OUT1=G2_MOVE_ROCK OUT2=G2_MOVE_PAPER OUT3=G2_MOVE_SCISSORS

# Vittoria giocatore 2?
.subckt AND A=G1_MOVE_ROCK B=G2_MOVE_PAPER OUT=VICTORY_G2_PAPER
.subckt AND A=G1_MOVE_PAPER B=G2_MOVE_SCISSORS OUT=VICTORY_G2_SCISSORS
.subckt AND A=G1_MOVE_SCISSORS B=G2_MOVE_ROCK OUT=VICTORY_G2_ROCK
.subckt OR3 A=VICTORY_G2_PAPER B=VICTORY_G2_SCISSORS C=VICTORY_G2_ROCK OUT=MANCHE_G2

# Controllo pareggio
.subckt EQUAL5 A4=FALSE A3=FALSE A2=FALSE A1=G1_1 A0=G1_0 B4=FALSE B3=FALSE B2=FALSE B1=G2_1 B0=G2_0 OUT=EQUAL

# Conteggio punti:
# Nuovo volore punti se vinvita
.subckt MUX4_1 S=MANCHE_G2 A3=TRUE A2=TRUE A1=TRUE A0=TRUE B3=FALSE B2=FALSE B1=FALSE B0=TRUE OUT3=POINTS_TO_ADD_3 OUT2=POINTS_TO_ADD_2 OUT1=POINTS_TO_ADD_1 OUT0=POINTS_TO_ADD_0
.subckt SUM5 A4=FALSE A3=POINTS_3 A2=POINTS_2 A1=POINTS_1 A0=POINTS_0 B3=POINTS_TO_ADD_3 B2=POINTS_TO_ADD_2 B1=POINTS_TO_ADD_1 B0=POINTS_TO_ADD_0 OUT3=AFTER_SUM_POINTS_3 OUT2=AFTER_SUM_POINTS_2 OUT1=AFTER_SUM_POINTS_1 OUT0=AFTER_SUM_POINTS_0

# MUX se pareggiata
.subckt MUX4_1 S=EQUAL A3=AFTER_SUM_POINTS_3 A2=AFTER_SUM_POINTS_2 A1=AFTER_SUM_POINTS_1 A0=AFTER_SUM_POINTS_0 B3=POINTS_3 B2=POINTS_2 B1=POINTS_1 B0=POINTS_0  OUT3=SET_POINTS_3 OUT2=SET_POINTS_2 OUT1=SET_POINTS_1 OUT0=SET_POINTS_0
# Vincita manche
.subckt NOT A=MANCHE_G2 OUT=MANCHE_G1
.subckt MUX2_2 S1=MOSSA_NON_VALIDA_O_PREC_NON_VALIDA S0=EQUAL A1=MANCHE_G2 A0=MANCHE_G1 B1=TRUE B0=TRUE C1=FALSE C0=FALSE D1=FALSE D0=FALSE OUT1=MANCHE_1_BEFORE_RESET_CHECK OUT0=MANCHE_0_BEFORE_RESET_CHECK
# Verifico se siamo in reset mode
.subckt MUX2_1 S=SETUP B1=FALSE B0=FALSE A1=MANCHE_1_BEFORE_RESET_CHECK A0=MANCHE_0_BEFORE_RESET_CHECK OUT1=MANCHE_1 OUT0=MANCHE_0

# Vediamo se sono finiti i turni e se la maossa corrente è valida
.subckt EQUAL5 A4=UPDATE_TURN_REG_4 A3=UPDATE_TURN_REG_3 A2=UPDATE_TURN_REG_2 A1=UPDATE_TURN_REG_1 A0=UPDATE_TURN_REG_0 B4=FALSE B3=FALSE B2=FALSE B1=FALSE B0=FALSE OUT=TURN_ENDED
.subckt NOT A=MOSSA_NON_VALIDA_O_PREC_NON_VALIDA OUT=MOSSA_VALIDA
.subckt AND A=TURN_ENDED B=MOSSA_VALIDA OUT=TURN_ENDED_AND_MOSSA_VALIDA



# Verifichiamo chi dei due è in vantaggio
# Giocatore 1
.subckt EQUAL5 A4=FALSE A3=UPDATE_POINTS_REG_3 A2=UPDATE_POINTS_REG_2 A1=UPDATE_POINTS_REG_1 A0=UPDATE_POINTS_REG_0 B4=FALSE B3=FALSE B2=FALSE B1=FALSE B0=TRUE OUT=EDGE_G1
# Giocatore 2
.subckt EQUAL5 A4=FALSE A3=UPDATE_POINTS_REG_3 A2=UPDATE_POINTS_REG_2 A1=UPDATE_POINTS_REG_1 A0=UPDATE_POINTS_REG_0 B4=FALSE B3=TRUE B2=TRUE B1=TRUE B0=TRUE OUT=EDGE_G2

# Controllo se giocatore se un giocatore ha vinto la partita
#! Siccome è un attimo complicato gesture il minore e uguale con il complemento a due facciamo solo: se numero negativo, numero != -1
# .subckt LE4BIT A3=UPDATE_POINTS_REG_3 A2=UPDATE_POINTS_REG_2 A1=UPDATE_POINTS_REG_1 A0=UPDATE_POINTS_REG_0 B3=TRUE B2=TRUE B1=TRUE B0=FALSE AleB=VICTORY_G2
.subckt EQUAL5 A4=FALSE A3=FALSE A2=UPDATE_POINTS_REG_2 A1=UPDATE_POINTS_REG_1 A0=UPDATE_POINTS_REG_0 B4=FALSE B3=FALSE B2=TRUE B1=TRUE B0=TRUE OUT=VICTORY_G2_NUMERO_UNGUALE_A_MENO_UNO
.subckt NOT A=VICTORY_G2_NUMERO_UNGUALE_A_MENO_UNO OUT=VICTORY_G2_NUMERO_DIVERSO_DA_MENO_UNO
.subckt AND A=VICTORY_G2_NUMERO_DIVERSO_DA_MENO_UNO B=UPDATE_POINTS_REG_3 OUT=VICTORY_G2 # UPDATE_POINTS_REG_3 lo usiamo per identificare se il numero è negativo


.subckt GE4BIT A3=UPDATE_POINTS_REG_3 A2=UPDATE_POINTS_REG_2 A1=UPDATE_POINTS_REG_1 A0=UPDATE_POINTS_REG_0 B3=FALSE B2=FALSE B1=TRUE B0=FALSE AgeB=VICTORY_G1

# MUX per la vittoria partita
# Distacco moggiore o uguale a 1
.subckt MUX2_2 S1=EDGE_G2 S0=EDGE_G1 A1=TRUE A0=TRUE B1=FALSE B0=TRUE C1=TRUE C0=FALSE D1=FALSE D0=FALSE OUT1=VITTORIA_LAYER_UNO_1 OUT0=VITTORIA_LAYER_UNO_0

# Distacco moggiore o uguale a 1
.subckt MUX2_2 S1=VICTORY_G2 S0=VICTORY_G1 A1=VITTORIA_LAYER_UNO_1 A0=VITTORIA_LAYER_UNO_0 B1=FALSE B0=TRUE C1=TRUE C0=FALSE D1=FALSE D0=FALSE OUT1=VITTORIA_LAYER_DUE_1 OUT0=VITTORIA_LAYER_DUE_0

# Turni finiti
.subckt MUX2_1 S=TURN_ENDED_AND_MOSSA_VALIDA A1=FALSE A0=FALSE B1=VITTORIA_LAYER_DUE_1 B0=VITTORIA_LAYER_DUE_0 OUT1=VITTORIA_LAYER_TRE_1 OUT0=VITTORIA_LAYER_TRE_0

# Partita può finire
.subckt MUX2_1 S=END_PRIMI_4_TURNI A1=FALSE A0=FALSE B1=VITTORIA_LAYER_TRE_1 B0=VITTORIA_LAYER_TRE_0 OUT1=PARTITA_1_BEFORE_RESET_CHECK OUT0=PARTITA_0_BEFORE_RESET_CHECK
.subckt MUX2_1 S=SETUP A1=PARTITA_1_BEFORE_RESET_CHECK A0=PARTITA_0_BEFORE_RESET_CHECK B0=FALSE B1=FALSE OUT1=PARTITA_1 OUT0=PARTITA_0


# Used only for debug
.subckt INSERT IN=TURN_ENDED_AND_MOSSA_VALIDA OUT=BITDEBUG
.search insert.blif

# Import registers 
.search and.blif
.search const_false.blif
.search const_true.blif
.search decoder2.blif
.search equal_5bit.blif
.search ge_4bit.blif
.search mux2_1.blif
.search mux2_2.blif
.search mux3_1.blif
.search mux4_1.blif
.search mux5_1.blif
.search not.blif
.search or.blif
.search or_3bit.blif
.search reg.blif
.search reg2.blif
.search reg3.blif
.search reg4.blif
.search reg5.blif
.search sum_5bit.blif
.search xnor.blif
